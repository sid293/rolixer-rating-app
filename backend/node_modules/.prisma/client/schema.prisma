generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(60)
  email     String   @unique @db.VarChar(255)
  password  String   @db.VarChar(255)
  address   String?  @db.VarChar(400)
  role      Role     @default(USER)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz
  stores    Store[]
  ratings   Rating[]

  @@index([email])
  @@index([role])
}

model Store {
  id            Int      @id @default(autoincrement())
  name          String   @db.VarChar(255)
  email         String   @unique @db.VarChar(255)
  address       String?  @db.VarChar(400)
  ownerId       Int      @map("owner_id")
  averageRating Decimal  @default(0.0) @map("average_rating") @db.Decimal(2, 1)
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime @default(now()) @map("updated_at") @db.Timestamptz
  owner         User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ratings       Rating[]

  @@index([name])
  @@index([ownerId])
  @@index([averageRating])
}

model Rating {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  storeId   Int      @map("store_id")
  rating    Int
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  store     Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@unique([userId, storeId])
  @@index([userId])
  @@index([storeId])
}

enum Role {
  ADMIN
  USER
  STORE_OWNER
}
